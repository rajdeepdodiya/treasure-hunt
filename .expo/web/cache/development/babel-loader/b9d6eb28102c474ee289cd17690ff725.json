{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/anonymousfiles/Desktop/Advanced Web Development/Project/Treasure-Hunt/MapScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport MapView, { Marker } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { getDistance } from 'geolib';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { db } from \"./FirebaseManager\";\n\nfunction MapScreen() {\n  var _this = this;\n\n  var mapRef = useRef(null);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentCoordinates = _useState2[0],\n      setCurrentCoordinates = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentUser = _useState4[0],\n      setCurrentUser = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allCaches = _useState6[0],\n      setAllCaches = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      nearbyLocations = _useState8[0],\n      setNearByLocations = _useState8[1];\n\n  var _useState9 = useState({\n    latitude: 43.25359093653678,\n    longitude: -79.86577030001203,\n    latitudeDelta: 0.05,\n    longitudeDelta: 0.05\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currRegion = _useState10[0],\n      setCurrRegion = _useState10[1];\n\n  useEffect(function () {\n    getCurrentLocation();\n    getAllCachesFromFirebase();\n    AsyncStorage.getItem(\"username\").then(function (dataFromStorage) {\n      setCurrentUser(dataFromStorage);\n    }).catch(function (error) {\n      console.log(\"Error getting username from storage:\" + error);\n    });\n  }, []);\n\n  var getCurrentLocation = function getCurrentLocation() {\n    Location.requestForegroundPermissionsAsync().then(function (result) {\n      if (result.status === \"granted\") {\n        return Location.getCurrentPositionAsync({});\n      } else {\n        alert(\"You have not granted location permission. Please grant location permission from your device's Settings menu.\");\n      }\n    }).then(function (location) {\n      console.log(\"Location received: \");\n      console.log(location);\n      var coordinates = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude\n      };\n      console.log(coordinates);\n      mapRef.current.animateCamera({\n        center: coordinates\n      }, 2000);\n      setCurrentCoordinates(coordinates);\n      showNearbyCaches(coordinates);\n    }).catch(function (error) {\n      console.log(\"Error while granting permission or while accessing current location: \" + error);\n    });\n  };\n\n  var showNearbyCaches = function showNearbyCaches(newCoordinates) {\n    setNearByLocations([]);\n    var loc = [];\n\n    for (var i = 0; i < allCaches.length; i++) {\n      var dist = getDistance({\n        latitude: newCoordinates.latitude,\n        longitude: newCoordinates.longitude\n      }, {\n        latitude: allCaches[i].latitude,\n        longitude: allCaches[i].longitude\n      }) * 0.000621371;\n\n      if (!isNaN(dist)) {\n        var distance = dist.toFixed(3);\n\n        if (distance <= 25) {\n          var locationInfo = {\n            location: {\n              latitude: LocationCoords[i].latitude,\n              longitude: LocationCoords[i].longitude\n            },\n            distance: distance,\n            title: LocationCoords[i].title,\n            id: LocationCoords[i].id\n          };\n          loc.push(locationInfo);\n        }\n      }\n    }\n\n    setNearByLocations(loc);\n    console.log(\"-----NEARBY LOCATIONS-----\" + nearbyLocations.length);\n    console.log(nearbyLocations.map(function (loc) {\n      console.log(loc);\n    }));\n    console.log(\"------------------------\");\n  };\n\n  var getAllCachesFromFirebase = function getAllCachesFromFirebase() {\n    console.log(\"Getting all caches from firebase\");\n    db.collection(\"caches\").where(\"postedBy\", \"!=\", currentUser).get().then(function (querySnapshot) {\n      if (querySnapshot.size === 0) {\n        console.log(\"No caches available for current user to display\");\n      } else {\n        var caches = [];\n        querySnapshot.forEach(function (doc) {\n          caches.push({\n            latitude: parseFloat(doc.data().latitude),\n            longitude: parseFloat(doc.data().longitude),\n            title: doc.data().cacheName,\n            id: doc.id\n          });\n        });\n        console.log(\"-----caches-----\");\n        console.log(caches);\n        setAllCaches(caches);\n      }\n    }).catch(function (error) {\n      console.log(\"Error getting all caches from firebase: \" + error);\n    });\n  };\n\n  var mapMoved = function mapMoved(data) {\n    console.log(data);\n    setCurrRegion(data);\n  };\n\n  return React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, React.createElement(MapView, {\n    style: {\n      width: Dimensions.get(\"window\").width,\n      height: Dimensions.get(\"window\").height\n    },\n    ref: mapRef,\n    initialRegion: currRegion,\n    onRegionChangeComplete: mapMoved,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, nearbyLocations.map(function (location) {\n    React.createElement(Marker, {\n      coordinate: {\n        latitude: location.latitude,\n        longitude: location.longitude\n      },\n      title: location.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    });\n  })), React.createElement(Button, {\n    title: \"Current\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 6\n    }\n  }));\n}\n\nexport default MapScreen;","map":{"version":3,"sources":["/Users/anonymousfiles/Desktop/Advanced Web Development/Project/Treasure-Hunt/MapScreen.js"],"names":["React","useEffect","useRef","useState","MapView","Marker","Location","getDistance","AsyncStorage","db","MapScreen","mapRef","currentCoordinates","setCurrentCoordinates","currentUser","setCurrentUser","allCaches","setAllCaches","nearbyLocations","setNearByLocations","latitude","longitude","latitudeDelta","longitudeDelta","currRegion","setCurrRegion","getCurrentLocation","getAllCachesFromFirebase","getItem","then","dataFromStorage","catch","error","console","log","requestForegroundPermissionsAsync","result","status","getCurrentPositionAsync","alert","location","coordinates","coords","current","animateCamera","center","showNearbyCaches","newCoordinates","loc","i","length","dist","isNaN","distance","toFixed","locationInfo","LocationCoords","title","id","push","map","collection","where","get","querySnapshot","size","caches","forEach","doc","parseFloat","data","cacheName","mapMoved","width","Dimensions","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { SafeAreaView, Text, Button } from 'react-native';\nimport MapView, {Marker} from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { Dimensions } from 'react-native';\nimport {getDistance} from 'geolib';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { db } from './FirebaseManager';\n\nfunction MapScreen(){\n\n    const mapRef = useRef(null);\n    const [currentCoordinates, setCurrentCoordinates] = useState({});\n    const [currentUser, setCurrentUser] = useState(\"\");\n    \n    const [allCaches, setAllCaches] = useState([]);\n    const [nearbyLocations, setNearByLocations] = useState([]);\n\n    const [currRegion, setCurrRegion] = useState({\n        latitude: 43.25359093653678,\n        longitude: -79.86577030001203,\n        latitudeDelta: 0.05,\n        longitudeDelta: 0.05\n      })\n\n    useEffect(() =>{\n\n        getCurrentLocation();\n        getAllCachesFromFirebase();\n\n        AsyncStorage.getItem(\"username\").then((dataFromStorage) => {\n            setCurrentUser(dataFromStorage);\n        })\n        .catch((error) => {\n            console.log(\"Error getting username from storage:\"+error);\n        });\n\n    }, [])\n\n    const getCurrentLocation = () => {\n\n        Location.requestForegroundPermissionsAsync()\n        .then(\n            (result) => {\n                if(result.status === \"granted\"){\n                    return Location.getCurrentPositionAsync({});\n                }\n                else{\n                    alert(\"You have not granted location permission. Please grant location permission from your device's Settings menu.\")\n                }\n            }\n        )\n        .then(\n            (location) => {\n                \n                console.log(\"Location received: \");\n                console.log(location);\n\n                const coordinates = {\n                    latitude: location.coords.latitude,\n                    longitude: location.coords.longitude\n                }\n                console.log(coordinates);\n\n                mapRef.current.animateCamera(\n                    {center: coordinates}, 2000\n                  );\n\n                setCurrentCoordinates(coordinates);\n                showNearbyCaches(coordinates);\n\n            }\n        )\n        .catch(\n            (error) => {\n\n                console.log(\"Error while granting permission or while accessing current location: \"+error);\n            }\n        )\n\n    }\n\n    const showNearbyCaches = (newCoordinates) => {\n       \n        setNearByLocations([]);\n\n        let loc = [];\n        \n        for(let i=0;i<allCaches.length;i++){\n\n          const dist = getDistance({latitude:newCoordinates.latitude, longitude:newCoordinates.longitude}, {latitude:allCaches[i].latitude, longitude:allCaches[i].longitude}) * 0.000621371;\n             \n          if(!isNaN(dist)){\n\n             const distance = dist.toFixed(3);\n             if (distance <= 25){\n\n                 const locationInfo = {\n                     location:{\n                         latitude:LocationCoords[i].latitude,\n                         longitude:LocationCoords[i].longitude\n                     },\n                     distance: distance,\n                     title: LocationCoords[i].title,\n                     id: LocationCoords[i].id\n                 }\n                 loc.push(locationInfo);\n             }\n                 \n             }  \n\n         }\n\n         setNearByLocations(loc);\n\n         console.log(\"-----NEARBY LOCATIONS-----\"+nearbyLocations.length);\n         console.log(nearbyLocations.map((loc) => {console.log(loc)}));\n         console.log(\"------------------------\");\n\n    }\n\n    const getAllCachesFromFirebase = () => {\n        console.log(\"Getting all caches from firebase\");\n\n        db.collection(\"caches\").where(\"postedBy\",\"!=\", currentUser).get().then((querySnapshot) => {\n            \n            if(querySnapshot.size === 0){\n                console.log(\"No caches available for current user to display\");\n            }else{\n                \n                const caches = [];\n\n                querySnapshot.forEach((doc) => {\n                    \n                    caches.push(\n                      { latitude: parseFloat(doc.data().latitude),\n                        longitude: parseFloat(doc.data().longitude),\n                        title: doc.data().cacheName, \n                        id:doc.id\n                    });\n\n                });\n\n                console.log(\"-----caches-----\");\n                console.log(caches);\n\n                setAllCaches(caches);\n               \n               }\n            }\n          )\n          .catch((error) => {\n              console.log(\"Error getting all caches from firebase: \"+error);\n          });      \n    }\n\n    const mapMoved = (data) => {\n        console.log(data);\n        setCurrRegion(data);\n    }\n\n    return(\n        <SafeAreaView>\n            \n            <MapView\n            style={{width:Dimensions.get(\"window\").width, height:Dimensions.get(\"window\").height}}\n            ref={mapRef}\n            initialRegion={currRegion}\n            onRegionChangeComplete={mapMoved}\n     >\n         {\n             nearbyLocations.map((location) => {\n\n                <Marker coordinate={{latitude: location.latitude, longitude: location.longitude}}\n                title={location.title}\n\n                />\n\n                \n\n             })\n         }\n       \n\n     </MapView>\n     <Button title=\"Current\"></Button>\n        </SafeAreaView>\n    );\n}\n\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}