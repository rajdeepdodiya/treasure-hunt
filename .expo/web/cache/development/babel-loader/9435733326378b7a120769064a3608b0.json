{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/anonymousfiles/Desktop/Advanced Web Development/Project/Treasure-Hunt/MapScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport MapView, { Marker } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nfunction MapScreen() {\n  var mapRef = useRef(null);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentCoordinates = _useState2[0],\n      setCurrentCoordinates = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setCurrentUser = _useState4[1];\n\n  var _useState5 = useState({\n    latitude: 43.25359093653678,\n    longitude: -79.86577030001203,\n    latitudeDelta: 0.005,\n    longitudeDelta: 0.005\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currRegion = _useState6[0],\n      setCurrRegion = _useState6[1];\n\n  useEffect(function () {\n    getCurrentLocation();\n  }, []);\n\n  var getCurrentLocation = function getCurrentLocation() {\n    Location.requestForegroundPermissionsAsync().then(function (result) {\n      if (result.status === \"granted\") {\n        return Location.getCurrentPositionAsync({});\n      } else {\n        alert(\"You have not granted location permission. Please grant location permission from your device's Settings menu.\");\n      }\n    }).then(function (location) {\n      console.log(\"Location received: \");\n      console.log(location);\n      var coordinates = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude\n      };\n      console.log(coordinates);\n      mapRef.current.animateCamera({\n        center: coordinates\n      }, 2000);\n      setCurrentCoordinates(coordinates);\n    }).catch(function (error) {\n      console.log(\"Error while granting permission or while accessing current location: \" + error);\n    });\n  };\n\n  var showCaches = function showCaches(coordinates) {\n    db.collection(\"caches\").where(\"postedBy\", \"!=\", user).get().then(function (querySnapshot) {\n      if (querySnapshot.size === 0) {\n        setMsg(\"You do not have any caches to find yet\");\n      } else {\n        setMsg(\"\");\n        LocationCoords = [];\n        nearestLocations = [];\n        querySnapshot.forEach(function (doc) {\n          LocationCoords.push({\n            latitude: parseFloat(doc.data().latitude),\n            longitude: parseFloat(doc.data().longitude),\n            title: doc.data().cacheName,\n            id: doc.id\n          });\n        });\n\n        for (var i = 0; i < LocationCoords.length; i++) {\n          var dist = getDistance({\n            latitude: coordinates.lat,\n            longitude: coordinates.lng\n          }, {\n            latitude: LocationCoords[i].latitude,\n            longitude: LocationCoords[i].longitude\n          }) * 0.000621371;\n\n          if (!isNaN(dist)) {\n            var locationInfo = {\n              location: {\n                latitude: LocationCoords[i].latitude,\n                longitude: LocationCoords[i].longitude\n              },\n              distance: dist.toFixed(3),\n              title: LocationCoords[i].title,\n              id: LocationCoords[i].id\n            };\n            nearestLocations.push(locationInfo);\n          }\n\n          nearestLocations.sort(function (a, b) {\n            return a.distance - b.distance;\n          });\n        }\n\n        setCachesArray(nearestLocations);\n        setLoading(false);\n      }\n    });\n  };\n\n  var mapMoved = function mapMoved(data) {\n    console.log(data);\n    setCurrRegion(data);\n  };\n\n  return React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, React.createElement(MapView, {\n    style: {\n      width: Dimensions.get(\"window\").width,\n      height: Dimensions.get(\"window\").height\n    },\n    ref: mapRef,\n    initialRegion: currRegion,\n    onRegionChangeComplete: mapMoved,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Current\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 6\n    }\n  }));\n}\n\nexport default MapScreen;","map":{"version":3,"sources":["/Users/anonymousfiles/Desktop/Advanced Web Development/Project/Treasure-Hunt/MapScreen.js"],"names":["React","useEffect","useRef","useState","MapView","Marker","Location","MapScreen","mapRef","currentCoordinates","setCurrentCoordinates","user","setCurrentUser","latitude","longitude","latitudeDelta","longitudeDelta","currRegion","setCurrRegion","getCurrentLocation","requestForegroundPermissionsAsync","then","result","status","getCurrentPositionAsync","alert","location","console","log","coordinates","coords","current","animateCamera","center","catch","error","showCaches","db","collection","where","get","querySnapshot","size","setMsg","LocationCoords","nearestLocations","forEach","doc","push","parseFloat","data","title","cacheName","id","i","length","dist","getDistance","lat","lng","isNaN","locationInfo","distance","toFixed","sort","a","b","setCachesArray","setLoading","mapMoved","width","Dimensions","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { SafeAreaView, Text, Button } from 'react-native';\nimport MapView, {Marker} from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { Dimensions } from 'react-native';\n\nfunction MapScreen(){\n\n    const mapRef = useRef(null);\n    const [currentCoordinates, setCurrentCoordinates] = useState({});\n    const [user, setCurrentUser] = useState(\"\");\n    const [currRegion, setCurrRegion] = useState({\n        latitude: 43.25359093653678,\n        longitude: -79.86577030001203,\n        latitudeDelta: 0.005,\n        longitudeDelta: 0.005\n      })\n\n    useEffect(() =>{\n        getCurrentLocation();\n\n    }, [])\n\n    \n\n    const getCurrentLocation = () => {\n\n        Location.requestForegroundPermissionsAsync()\n        .then(\n            (result) => {\n                if(result.status === \"granted\"){\n                    return Location.getCurrentPositionAsync({});\n                }\n                else{\n                    alert(\"You have not granted location permission. Please grant location permission from your device's Settings menu.\")\n                }\n            }\n        )\n        .then(\n            (location) => {\n                \n                console.log(\"Location received: \");\n                console.log(location);\n\n                const coordinates = {\n                    latitude: location.coords.latitude,\n                    longitude: location.coords.longitude\n                }\n                console.log(coordinates);\n\n                mapRef.current.animateCamera(\n                    {center: coordinates}, 2000\n                  );\n\n                setCurrentCoordinates(coordinates);\n\n            }\n        )\n        .catch(\n            (error) => {\n\n                console.log(\"Error while granting permission or while accessing current location: \"+error);\n            }\n        )\n\n    }\n\n    const showCaches = (coordinates) => {\n        \n        \n        db.collection(\"caches\").where(\"postedBy\",\"!=\",user).get().then((querySnapshot) => {\n            if(querySnapshot.size === 0){\n                setMsg(\"You do not have any caches to find yet\");\n            }else{\n                \n                setMsg(\"\");\n                 LocationCoords=[];\n                 nearestLocations=[];\n\n                querySnapshot.forEach((doc) => {\n                    \n                  LocationCoords.push({latitude:parseFloat(doc.data().latitude), longitude:parseFloat(doc.data().longitude),title:doc.data().cacheName,id:doc.id});\n                });\n                \n                for(let i=0;i<LocationCoords.length;i++){\n                   // const dist=getDistance({latitude:43.656290660189946,longitude:-79.38017140235499},{latitude:LocationCoords[i].latitude,longitude:LocationCoords[i].longitude}) * 0.000621371;\n                 const dist=getDistance({latitude:coordinates.lat,longitude:coordinates.lng},{latitude:LocationCoords[i].latitude,longitude:LocationCoords[i].longitude}) * 0.000621371;\n                    if(!isNaN(dist)){\n                            const locationInfo = {\n                                location:{\n                                    latitude:LocationCoords[i].latitude,\n                                    longitude:LocationCoords[i].longitude\n                                },\n                               distance:dist.toFixed(3),\n                               title:LocationCoords[i].title,\n                               id:LocationCoords[i].id\n                            }\n                            nearestLocations.push(locationInfo);\n                        \n                    }   \n                    nearestLocations.sort(function (a, b) {\n                        return a.distance - b.distance;\n                      }); \n                }\n                setCachesArray(nearestLocations);\n                 setLoading(false);\n                \n               }\n            }\n          );      \n    }\n\n    const mapMoved = (data) =>{\n        console.log(data);\n        setCurrRegion(data);\n    }\n\n    return(\n        <SafeAreaView>\n            \n            <MapView\n            style={{width:Dimensions.get(\"window\").width, height:Dimensions.get(\"window\").height}}\n            ref={mapRef}\n            initialRegion={currRegion}\n            onRegionChangeComplete={mapMoved}\n     >\n\n     </MapView>\n     <Button title=\"Current\"></Button>\n        </SafeAreaView>\n    );\n}\n\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}