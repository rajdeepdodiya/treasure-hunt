{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/graphic/Desktop/Web Dev adv Project/treasure-hunt/NotesScreen.js\";\n\nimport React, { useState } from 'react';\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LongPressGestureHandler } from 'react-native-gesture-handler';\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { db } from \"./FirebaseManager\";\n\nvar NotesScreen = function NotesScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var location = route.params.location;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      editVar = _useState2[0],\n      setEditVar = _useState2[1];\n\n  var _useState3 = useState(\"create\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      iconname = _useState4[0],\n      setIconname = _useState4[1];\n\n  var _useState5 = useState('#0000FF'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      iconcolor = _useState6[0],\n      setIconcolor = _useState6[1];\n\n  var userObj = {};\n  var notesObj = {};\n  var notesFromDb = [];\n  var notesToUpdate = [];\n  var user = route.params.user;\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      input = _useState8[0],\n      setInput = _useState8[1];\n\n  React.useLayoutEffect(function () {\n    navigation.setOptions({\n      headerRight: function headerRight() {\n        return React.createElement(Ionicons, {\n          style: {\n            marginRight: 30\n          },\n          name: iconname,\n          size: 40,\n          color: iconcolor,\n          onPress: function onPress() {\n            editPressed();\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }\n        });\n      }\n    });\n  }, [navigation, {}]);\n\n  var editPressed = function editPressed() {\n    if (iconname === \"create\") {\n      setIconname(\"checkmark\");\n      setIconcolor('#00A300');\n      setEditVar(true);\n    } else {\n      setIconname(\"create\");\n      setIconcolor('#0000FF');\n      setEditVar(false);\n      saveNotesToDatabase();\n    }\n  };\n\n  var saveNotesToDatabase = function saveNotesToDatabase() {\n    console.log(\"current loc\");\n    console.log(location);\n    db.collection(\"users\").where(\"username\", \"==\", user).get().then(function (querySnapShot) {\n      querySnapShot.forEach(function (doc) {\n        userObj = doc;\n      });\n      console.log(userObj.data());\n\n      if (\"notes\" in userObj.data()) {\n        notesFromDb = userObj.data().notes;\n        notesFromDb.forEach(function (note) {\n          console.log(note);\n\n          if (location in note.data()) {\n            console.log(\"current input\");\n            console.log(input);\n            note[location] = input;\n          }\n\n          notesToUpdate.push(note);\n        });\n      } else {\n        notesObj = _defineProperty({}, location, [input]);\n        notesToUpdate.push(notesObj);\n      }\n\n      db.collection(\"users\").doc(userObj.id).update({\n        notes: notesToUpdate\n      }).then(console.log(\"successfully updated notes\")).catch(function (err) {\n        console.log(\"error while updating notes\");\n        console.log(err);\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, {\n    editable: editVar,\n    multiline: true,\n    numberOfLines: 10,\n    value: input,\n    onChangeText: setInput,\n    style: {\n      height: '90%',\n      borderColor: 'gray',\n      borderWidth: 1,\n      margin: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default NotesScreen;","map":{"version":3,"sources":["/Users/graphic/Desktop/Web Dev adv Project/treasure-hunt/NotesScreen.js"],"names":["React","useState","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","LongPressGestureHandler","Ionicons","db","NotesScreen","navigation","route","location","params","editVar","setEditVar","iconname","setIconname","iconcolor","setIconcolor","userObj","notesObj","notesFromDb","notesToUpdate","user","input","setInput","useLayoutEffect","setOptions","headerRight","marginRight","editPressed","saveNotesToDatabase","console","log","collection","where","get","then","querySnapShot","forEach","doc","data","notes","note","push","id","update","catch","err","height","borderColor","borderWidth","margin"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAASC,kDAAT,QAAmE,OAAnE;;;;;AAEA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,OAAOC,QAAP;AACA,SAASC,EAAT;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAwB;AAAA,MAAtBC,UAAsB,QAAtBA,UAAsB;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAExC,MAAMC,QAAQ,GAACD,KAAK,CAACE,MAAN,CAAaD,QAA5B;;AACA,kBAA6BR,QAAQ,CAAC,KAAD,CAArC;AAAA;AAAA,MAAOU,OAAP;AAAA,MAAeC,UAAf;;AACA,mBAA+BX,QAAQ,CAAC,QAAD,CAAvC;AAAA;AAAA,MAAOY,QAAP;AAAA,MAAgBC,WAAhB;;AACA,mBAAiCb,QAAQ,CAAC,SAAD,CAAzC;AAAA;AAAA,MAAOc,SAAP;AAAA,MAAiBC,YAAjB;;AACA,MAAIC,OAAO,GAAC,EAAZ;AACA,MAAIC,QAAQ,GAAC,EAAb;AACA,MAAIC,WAAW,GAAC,EAAhB;AACA,MAAIC,aAAa,GAAC,EAAlB;AACF,MAAMC,IAAI,GAACb,KAAK,CAACE,MAAN,CAAaW,IAAxB;;AAEA,mBAAyBpB,QAAQ,CAAC,EAAD,CAAjC;AAAA;AAAA,MAAOqB,KAAP;AAAA,MAAaC,QAAb;;AAEEvB,EAAAA,KAAK,CAACwB,eAAN,CAAsB,YAAM;AACxBjB,IAAAA,UAAU,CAACkB,UAAX,CAAsB;AACpBC,MAAAA,WAAW,EAAG;AAAA,eACZ,oBAAC,QAAD;AACA,UAAA,KAAK,EAAE;AAACC,YAAAA,WAAW,EAAC;AAAb,WADP;AAEE,UAAA,IAAI,EAAEd,QAFR;AAGE,UAAA,IAAI,EAAE,EAHR;AAIE,UAAA,KAAK,EAAEE,SAJT;AAKE,UAAA,OAAO,EAAE,mBAAM;AAACa,YAAAA,WAAW;AAAI,WALjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADY;AAAA;AADM,KAAtB;AAWD,GAZH,EAYK,CAACrB,UAAD,EAAY,EAAZ,CAZL;;AAcA,MAAMqB,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAGf,QAAQ,KAAK,QAAhB,EAAyB;AACrBC,MAAAA,WAAW,CAAC,WAAD,CAAX;AACAE,MAAAA,YAAY,CAAC,SAAD,CAAZ;AACAJ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH,KAJD,MAIK;AACDE,MAAAA,WAAW,CAAC,QAAD,CAAX;AACAE,MAAAA,YAAY,CAAC,SAAD,CAAZ;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAiB,MAAAA,mBAAmB;AACtB;AAEJ,GAZD;;AAcA,MAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYtB,QAAZ;AAEAJ,IAAAA,EAAE,CAAC2B,UAAH,CAAc,OAAd,EAAuBC,KAAvB,CAA6B,UAA7B,EAAwC,IAAxC,EAA6CZ,IAA7C,EAAmDa,GAAnD,GACCC,IADD,CAEI,UAACC,aAAD,EAAmB;AACfA,MAAAA,aAAa,CAACC,OAAd,CAAsB,UAACC,GAAD,EAAS;AAC3BrB,QAAAA,OAAO,GAACqB,GAAR;AACH,OAFD;AAGAR,MAAAA,OAAO,CAACC,GAAR,CAAYd,OAAO,CAACsB,IAAR,EAAZ;;AACA,UAAG,WAAWtB,OAAO,CAACsB,IAAR,EAAd,EAA6B;AACzBpB,QAAAA,WAAW,GAAGF,OAAO,CAACsB,IAAR,GAAeC,KAA7B;AAEArB,QAAAA,WAAW,CAACkB,OAAZ,CAAoB,UAACI,IAAD,EAAU;AAACX,UAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;;AAC/B,cAAGhC,QAAQ,IAAIgC,IAAI,CAACF,IAAL,EAAf,EAA2B;AACvBT,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAmB,YAAAA,IAAI,CAAChC,QAAD,CAAJ,GAAgBa,KAAhB;AACH;;AACCF,UAAAA,aAAa,CAACsB,IAAd,CAAmBD,IAAnB;AACD,SAPD;AAWH,OAdD,MAcK;AACDvB,QAAAA,QAAQ,uBAAGT,QAAH,EAAa,CAACa,KAAD,CAAb,CAAR;AACAF,QAAAA,aAAa,CAACsB,IAAd,CAAmBxB,QAAnB;AACH;;AAIFb,MAAAA,EAAE,CAAC2B,UAAH,CAAc,OAAd,EAAuBM,GAAvB,CAA2BrB,OAAO,CAAC0B,EAAnC,EAAuCC,MAAvC,CAA8C;AAC1CJ,QAAAA,KAAK,EAACpB;AADoC,OAA9C,EAGCe,IAHD,CAGML,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAHN,EAICc,KAJD,CAIO,UAACC,GAAD,EAAS;AAAChB,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAA0CD,QAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;AAAkB,OAJ7E;AAKF,KAjCL,EAmCCD,KAnCD,CAmCO,UAACC,GAAD,EAAS;AACZhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;AACH,KArCD;AAuCH,GA3CD;;AA6CJ,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,SAAD;AACA,IAAA,QAAQ,EAAEnC,OADV;AAEA,IAAA,SAAS,MAFT;AAGA,IAAA,aAAa,EAAE,EAHf;AAIA,IAAA,KAAK,EAAEW,KAJP;AAKA,IAAA,YAAY,EAAEC,QALd;AAMF,IAAA,KAAK,EAAE;AAAEwB,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,WAAW,EAAE,MAA9B;AAAsCC,MAAAA,WAAW,EAAE,CAAnD;AAAuDC,MAAAA,MAAM,EAAC;AAA9D,KANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ;AAgBC,CAvGD;;AAyGA,eAAe5C,WAAf","sourcesContent":["import React , {useState} from 'react';\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react';\nimport { Text,Button,TextInput,View } from 'react-native';\nimport { LongPressGestureHandler } from 'react-native-gesture-handler';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport { db } from './FirebaseManager';\n\nconst NotesScreen = ({navigation,route}) => {\n\n    const location=route.params.location;\n    const [editVar,setEditVar] = useState(false);\n    const [iconname,setIconname] = useState(\"create\");\n    const [iconcolor,setIconcolor] = useState('#0000FF');\n    let userObj={};\n    let notesObj={};\n    let notesFromDb=[];\n    let notesToUpdate=[];\n  const user=route.params.user;\n\n  const [input,setInput] = useState(\"\");\n\n    React.useLayoutEffect(() => {\n        navigation.setOptions({\n          headerRight : () => ( \n            <Ionicons\n            style={{marginRight:30}}\n              name={iconname}\n              size={40}\n              color={iconcolor}\n              onPress={() => {editPressed();}}\n            />\n      )\n        })\n      }, [navigation,{}]);\n    \n    const editPressed = () => {\n        if(iconname === \"create\"){\n            setIconname(\"checkmark\");\n            setIconcolor('#00A300');\n            setEditVar(true);\n        }else{\n            setIconname(\"create\");\n            setIconcolor('#0000FF');\n            setEditVar(false);\n            saveNotesToDatabase();\n        }\n  \n    }\n\n    const saveNotesToDatabase = () => {\n        console.log(\"current loc\");\n        console.log(location);\n\n        db.collection(\"users\").where(\"username\",\"==\",user).get()\n        .then(\n            (querySnapShot) => {\n                querySnapShot.forEach((doc) => {\n                    userObj=doc;\n                });\n                console.log(userObj.data());\n                if(\"notes\" in userObj.data()){\n                    notesFromDb = userObj.data().notes;\n                    \n                    notesFromDb.forEach((note) => {console.log(note);\n                    if(location in note.data()){\n                        console.log(\"current input\");\n                        console.log(input);\n                        note[location] =input;\n                    }\n                      notesToUpdate.push(note); \n                    });\n                    // console.log(\"updated notes db array\");\n                    // console.log(notesFromdb);\n\n                }else{\n                    notesObj={[location]:[input]}\n                    notesToUpdate.push(notesObj);\n                }\n\n               //update db\n\n               db.collection(\"users\").doc(userObj.id).update({\n                   notes:notesToUpdate\n               })\n               .then(console.log(\"successfully updated notes\"))\n               .catch((err) => {console.log(\"error while updating notes\");console.log(err);});\n            }\n        )\n        .catch((err) => {\n            console.log(err);\n        });\n\n    }\n\nreturn(\n    <View>\n        \n\n       \n\n        <TextInput\n        editable={editVar}\n        multiline\n        numberOfLines={10}\n        value={input}\n        onChangeText={setInput}\n      style={{ height: '90%', borderColor: 'gray', borderWidth: 1 , margin:15}}\n    />\n    </View>\n);\n}\n\nexport default NotesScreen;"]},"metadata":{},"sourceType":"module"}