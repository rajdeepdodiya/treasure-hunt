{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/anonymousfiles/Desktop/Advanced Web Development/Project/Treasure-Hunt/MapScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport MapView, { Marker } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { getDistance } from 'geolib';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { db } from \"./FirebaseManager\";\n\nfunction MapScreen() {\n  var _this = this;\n\n  var mapRef = useRef(null);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentCoordinates = _useState2[0],\n      setCurrentCoordinates = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setCurrentUser = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allCaches = _useState6[0],\n      setAllCaches = _useState6[1];\n\n  nearestLocations = [];\n\n  var _useState7 = useState({\n    latitude: 43.25359093653678,\n    longitude: -79.86577030001203,\n    latitudeDelta: 0.05,\n    longitudeDelta: 0.05\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currRegion = _useState8[0],\n      setCurrRegion = _useState8[1];\n\n  useEffect(function () {\n    getCurrentLocation();\n    getAllCachesFromFirebase;\n    AsyncStorage.getItem(\"username\").then(function (dataFromStorage) {\n      console.log(dataFromStorage);\n      setCurrentUser(dataFromStorage);\n    }).catch(function (error) {\n      console.log(\"Error getting username from storage:\" + error);\n    });\n  }, []);\n\n  var getCurrentLocation = function getCurrentLocation() {\n    Location.requestForegroundPermissionsAsync().then(function (result) {\n      if (result.status === \"granted\") {\n        return Location.getCurrentPositionAsync({});\n      } else {\n        alert(\"You have not granted location permission. Please grant location permission from your device's Settings menu.\");\n      }\n    }).then(function (location) {\n      console.log(\"Location received: \");\n      console.log(location);\n      var coordinates = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude\n      };\n      console.log(coordinates);\n      mapRef.current.animateCamera({\n        center: coordinates\n      }, 2000);\n      setCurrentCoordinates(coordinates);\n      showNearbyCaches(coordinates);\n    }).catch(function (error) {\n      console.log(\"Error while granting permission or while accessing current location: \" + error);\n    });\n  };\n\n  var showNearbyCaches = function showNearbyCaches(newCoordinates) {\n    nearestLocations = [];\n\n    for (var i = 0; i < LocationCoords.length; i++) {\n      var dist = getDistance({\n        latitude: newCoordinates.latitude,\n        longitude: newCoordinates.longitude\n      }, {\n        latitude: LocationCoords[i].latitude,\n        longitude: LocationCoords[i].longitude\n      }) * 0.000621371;\n\n      if (!isNaN(dist)) {\n        var distance = dist.toFixed(3);\n\n        if (distance <= 25) {\n          var locationInfo = {\n            location: {\n              latitude: LocationCoords[i].latitude,\n              longitude: LocationCoords[i].longitude\n            },\n            distance: distance,\n            title: LocationCoords[i].title,\n            id: LocationCoords[i].id\n          };\n          nearestLocations.push(locationInfo);\n        }\n      }\n    }\n\n    console.log(\"-----NEARBY LOCATIONS-----\");\n    console.log(nearestLocations);\n    console.log(\"------------------------\");\n  };\n\n  var getAllCachesFromFirebase = function getAllCachesFromFirebase() {\n    db.collection(\"caches\").where(\"postedBy\", \"!=\", user).get().then(function (querySnapshot) {\n      if (querySnapshot.size === 0) {} else {\n        LocationCoords = [];\n        querySnapshot.forEach(function (doc) {\n          LocationCoords.push({\n            latitude: parseFloat(doc.data().latitude),\n            longitude: parseFloat(doc.data().longitude),\n            title: doc.data().cacheName,\n            id: doc.id\n          });\n        });\n      }\n    });\n  };\n\n  var mapMoved = function mapMoved(data) {\n    console.log(data);\n    setCurrRegion(data);\n  };\n\n  return React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, React.createElement(MapView, {\n    style: {\n      width: Dimensions.get(\"window\").width,\n      height: Dimensions.get(\"window\").height\n    },\n    ref: mapRef,\n    initialRegion: currRegion,\n    onRegionChangeComplete: mapMoved,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, nearestLocations.map(function (location) {\n    React.createElement(Marker, {\n      coordinate: {\n        latitude: location.latitude,\n        longitude: location.longitude\n      },\n      title: location.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    });\n  })), React.createElement(Button, {\n    title: \"Current\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 6\n    }\n  }));\n}\n\nexport default MapScreen;","map":{"version":3,"sources":["/Users/anonymousfiles/Desktop/Advanced Web Development/Project/Treasure-Hunt/MapScreen.js"],"names":["React","useEffect","useRef","useState","MapView","Marker","Location","getDistance","AsyncStorage","db","MapScreen","mapRef","currentCoordinates","setCurrentCoordinates","user","setCurrentUser","allCaches","setAllCaches","nearestLocations","latitude","longitude","latitudeDelta","longitudeDelta","currRegion","setCurrRegion","getCurrentLocation","getAllCachesFromFirebase","getItem","then","dataFromStorage","console","log","catch","error","requestForegroundPermissionsAsync","result","status","getCurrentPositionAsync","alert","location","coordinates","coords","current","animateCamera","center","showNearbyCaches","newCoordinates","i","LocationCoords","length","dist","isNaN","distance","toFixed","locationInfo","title","id","push","collection","where","get","querySnapshot","size","forEach","doc","parseFloat","data","cacheName","mapMoved","width","Dimensions","height","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { SafeAreaView, Text, Button } from 'react-native';\nimport MapView, {Marker} from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { Dimensions } from 'react-native';\nimport {getDistance} from 'geolib';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { db } from './FirebaseManager';\n\nfunction MapScreen(){\n\n    const mapRef = useRef(null);\n    const [currentCoordinates, setCurrentCoordinates] = useState({});\n    const [user, setCurrentUser] = useState(\"\");\n    \n    const [allCaches, setAllCaches] = useState([]);\n     nearestLocations=[];\n\n    const [currRegion, setCurrRegion] = useState({\n        latitude: 43.25359093653678,\n        longitude: -79.86577030001203,\n        latitudeDelta: 0.05,\n        longitudeDelta: 0.05\n      })\n\n    useEffect(() =>{\n\n        getCurrentLocation();\n        getAllCachesFromFirebase\n\n        AsyncStorage.getItem(\"username\").then((dataFromStorage) => {\n            console.log(dataFromStorage);\n            setCurrentUser(dataFromStorage);\n        })\n        .catch((error) => {\n            console.log(\"Error getting username from storage:\"+error);\n        });\n\n    }, [])\n\n    const getCurrentLocation = () => {\n\n        Location.requestForegroundPermissionsAsync()\n        .then(\n            (result) => {\n                if(result.status === \"granted\"){\n                    return Location.getCurrentPositionAsync({});\n                }\n                else{\n                    alert(\"You have not granted location permission. Please grant location permission from your device's Settings menu.\")\n                }\n            }\n        )\n        .then(\n            (location) => {\n                \n                console.log(\"Location received: \");\n                console.log(location);\n\n                const coordinates = {\n                    latitude: location.coords.latitude,\n                    longitude: location.coords.longitude\n                }\n                console.log(coordinates);\n\n                mapRef.current.animateCamera(\n                    {center: coordinates}, 2000\n                  );\n\n                setCurrentCoordinates(coordinates);\n                showNearbyCaches(coordinates);\n\n            }\n        )\n        .catch(\n            (error) => {\n\n                console.log(\"Error while granting permission or while accessing current location: \"+error);\n            }\n        )\n\n    }\n\n    const showNearbyCaches = (newCoordinates) => {\n        nearestLocations=[];\n\n        for(let i=0;i<LocationCoords.length;i++){\n\n            // const dist=getDistance({latitude:43.656290660189946,longitude:-79.38017140235499},{latitude:LocationCoords[i].latitude,longitude:LocationCoords[i].longitude}) * 0.000621371;\n          const dist = getDistance({latitude:newCoordinates.latitude, longitude:newCoordinates.longitude}, {latitude:LocationCoords[i].latitude, longitude:LocationCoords[i].longitude}) * 0.000621371;\n             \n          if(!isNaN(dist)){\n\n             const distance = dist.toFixed(3);\n             if (distance <= 25){\n\n                 const locationInfo = {\n                     location:{\n                         latitude:LocationCoords[i].latitude,\n                         longitude:LocationCoords[i].longitude\n                     },\n                     distance: distance,\n                     title: LocationCoords[i].title,\n                     id: LocationCoords[i].id\n                 }\n                 \n                 nearestLocations.push(locationInfo);\n             }\n                 \n             }  \n\n         }\n\n         console.log(\"-----NEARBY LOCATIONS-----\");\n         console.log(nearestLocations);\n         console.log(\"------------------------\");\n\n    }\n\n    const getAllCachesFromFirebase = () => {\n\n        db.collection(\"caches\").where(\"postedBy\",\"!=\", user).get().then((querySnapshot) => {\n            \n            if(querySnapshot.size === 0){\n                \n            }else{\n                \n                 LocationCoords=[];\n\n                querySnapshot.forEach((doc) => {\n                    \n                  LocationCoords.push({latitude:parseFloat(doc.data().latitude), longitude:parseFloat(doc.data().longitude),title:doc.data().cacheName,id:doc.id});\n                });\n               \n               }\n            }\n          );      \n    }\n\n    const mapMoved = (data) => {\n        console.log(data);\n        setCurrRegion(data);\n    }\n\n    return(\n        <SafeAreaView>\n            \n            <MapView\n            style={{width:Dimensions.get(\"window\").width, height:Dimensions.get(\"window\").height}}\n            ref={mapRef}\n            initialRegion={currRegion}\n            onRegionChangeComplete={mapMoved}\n     >\n         {\n             nearestLocations.map((location) => {\n\n                <Marker coordinate={{latitude: location.latitude, longitude: location.longitude}}\n                title={location.title}\n\n                />\n\n                \n\n             })\n         }\n       \n\n     </MapView>\n     <Button title=\"Current\"></Button>\n        </SafeAreaView>\n    );\n}\n\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}