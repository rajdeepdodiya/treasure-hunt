{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/anonymousfiles/Desktop/Advanced Web Development/Project/Treasure-Hunt/MapScreen.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport MapView, { Marker } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { getDistance } from 'geolib';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nfunction MapScreen() {\n  var _this = this;\n\n  var mapRef = useRef(null);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentCoordinates = _useState2[0],\n      setCurrentCoordinates = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setCurrentUser = _useState4[1];\n\n  var LocationCoords = [];\n  var nearestLocations = [];\n\n  var _useState5 = useState({\n    latitude: 43.25359093653678,\n    longitude: -79.86577030001203,\n    latitudeDelta: 0.05,\n    longitudeDelta: 0.05\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currRegion = _useState6[0],\n      setCurrRegion = _useState6[1];\n\n  useEffect(function () {\n    getCurrentLocation();\n    AsyncStorage.getItem(\"username\").then(function (dataFromStorage) {\n      console.log(dataFromStorage);\n      setCurrentUser(dataFromStorage);\n    }).catch(function (error) {\n      console.log(\"Error getting username from storage:\" + error);\n    });\n  }, []);\n\n  var getCurrentLocation = function getCurrentLocation() {\n    Location.requestForegroundPermissionsAsync().then(function (result) {\n      if (result.status === \"granted\") {\n        return Location.getCurrentPositionAsync({});\n      } else {\n        alert(\"You have not granted location permission. Please grant location permission from your device's Settings menu.\");\n      }\n    }).then(function (location) {\n      console.log(\"Location received: \");\n      console.log(location);\n      var coordinates = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude\n      };\n      console.log(coordinates);\n      mapRef.current.animateCamera({\n        center: coordinates\n      }, 2000);\n      setCurrentCoordinates(coordinates);\n      showCaches();\n    }).catch(function (error) {\n      console.log(\"Error while granting permission or while accessing current location: \" + error);\n    });\n  };\n\n  var showCaches = function showCaches() {\n    console.log(user);\n    db.collection(\"caches\").where(\"postedBy\", \"!=\", user).get().then(function (querySnapshot) {\n      if (querySnapshot.size === 0) {} else {\n        LocationCoords = [];\n        nearestLocations = [];\n        querySnapshot.forEach(function (doc) {\n          LocationCoords.push({\n            latitude: parseFloat(doc.data().latitude),\n            longitude: parseFloat(doc.data().longitude),\n            title: doc.data().cacheName,\n            id: doc.id\n          });\n        });\n\n        for (var i = 0; i < LocationCoords.length; i++) {\n          var dist = getDistance({\n            latitude: currentCoordinates.latitude,\n            longitude: currentCoordinates.longitude\n          }, {\n            latitude: LocationCoords[i].latitude,\n            longitude: LocationCoords[i].longitude\n          }) * 0.000621371;\n\n          if (!isNaN(dist)) {\n            distance: dist.toFixed(3);\n\n            if (distance < 25) {\n              var locationInfo = {\n                location: {\n                  latitude: LocationCoords[i].latitude,\n                  longitude: LocationCoords[i].longitude\n                },\n                distance: dist.toFixed(3),\n                title: LocationCoords[i].title,\n                id: LocationCoords[i].id\n              };\n              nearestLocations.push(locationInfo);\n            }\n          }\n\n          console.log(nearestLocations);\n        }\n      }\n    });\n  };\n\n  var mapMoved = function mapMoved(data) {\n    console.log(data);\n    setCurrRegion(data);\n  };\n\n  return React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, React.createElement(MapView, {\n    style: {\n      width: Dimensions.get(\"window\").width,\n      height: Dimensions.get(\"window\").height\n    },\n    ref: mapRef,\n    initialRegion: currRegion,\n    onRegionChangeComplete: mapMoved,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, nearestLocations.map(function (location) {\n    React.createElement(Marker, {\n      coordinate: {\n        latitude: location.latitude,\n        longitude: location.longitude\n      },\n      title: location.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    });\n  })), React.createElement(Button, {\n    title: \"Current\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 6\n    }\n  }));\n}\n\nexport default MapScreen;","map":{"version":3,"sources":["/Users/anonymousfiles/Desktop/Advanced Web Development/Project/Treasure-Hunt/MapScreen.js"],"names":["React","useEffect","useRef","useState","MapView","Marker","Location","getDistance","AsyncStorage","MapScreen","mapRef","currentCoordinates","setCurrentCoordinates","user","setCurrentUser","LocationCoords","nearestLocations","latitude","longitude","latitudeDelta","longitudeDelta","currRegion","setCurrRegion","getCurrentLocation","getItem","then","dataFromStorage","console","log","catch","error","requestForegroundPermissionsAsync","result","status","getCurrentPositionAsync","alert","location","coordinates","coords","current","animateCamera","center","showCaches","db","collection","where","get","querySnapshot","size","forEach","doc","push","parseFloat","data","title","cacheName","id","i","length","dist","isNaN","distance","toFixed","locationInfo","mapMoved","width","Dimensions","height","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { SafeAreaView, Text, Button } from 'react-native';\nimport MapView, {Marker} from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { Dimensions } from 'react-native';\nimport {getDistance} from 'geolib';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nfunction MapScreen(){\n\n    const mapRef = useRef(null);\n    const [currentCoordinates, setCurrentCoordinates] = useState({});\n    const [user, setCurrentUser] = useState(\"\");\n    \n    var LocationCoords = [];\n    var nearestLocations=[];\n\n    const [currRegion, setCurrRegion] = useState({\n        latitude: 43.25359093653678,\n        longitude: -79.86577030001203,\n        latitudeDelta: 0.05,\n        longitudeDelta: 0.05\n      })\n\n    useEffect(() =>{\n\n        getCurrentLocation();\n\n        AsyncStorage.getItem(\"username\").then((dataFromStorage) => {\n            console.log(dataFromStorage);\n            setCurrentUser(dataFromStorage);\n        })\n        .catch((error) => {\n            console.log(\"Error getting username from storage:\"+error);\n        });\n\n    }, [])\n\n    const getCurrentLocation = () => {\n\n        Location.requestForegroundPermissionsAsync()\n        .then(\n            (result) => {\n                if(result.status === \"granted\"){\n                    return Location.getCurrentPositionAsync({});\n                }\n                else{\n                    alert(\"You have not granted location permission. Please grant location permission from your device's Settings menu.\")\n                }\n            }\n        )\n        .then(\n            (location) => {\n                \n                console.log(\"Location received: \");\n                console.log(location);\n\n                const coordinates = {\n                    latitude: location.coords.latitude,\n                    longitude: location.coords.longitude\n                }\n                console.log(coordinates);\n\n                mapRef.current.animateCamera(\n                    {center: coordinates}, 2000\n                  );\n\n                setCurrentCoordinates(coordinates);\n                showCaches();\n\n            }\n        )\n        .catch(\n            (error) => {\n\n                console.log(\"Error while granting permission or while accessing current location: \"+error);\n            }\n        )\n\n    }\n\n    const showCaches = () => {\n\n        console.log(user);\n        \n        db.collection(\"caches\").where(\"postedBy\",\"!=\", user).get().then((querySnapshot) => {\n            \n            if(querySnapshot.size === 0){\n                \n            }else{\n                \n                \n                 LocationCoords=[];\n                 nearestLocations=[];\n\n                querySnapshot.forEach((doc) => {\n                    \n                  LocationCoords.push({latitude:parseFloat(doc.data().latitude), longitude:parseFloat(doc.data().longitude),title:doc.data().cacheName,id:doc.id});\n                });\n                \n                for(let i=0;i<LocationCoords.length;i++){\n\n                   // const dist=getDistance({latitude:43.656290660189946,longitude:-79.38017140235499},{latitude:LocationCoords[i].latitude,longitude:LocationCoords[i].longitude}) * 0.000621371;\n                 const dist = getDistance({latitude:currentCoordinates.latitude,longitude:currentCoordinates.longitude}, {latitude:LocationCoords[i].latitude,longitude:LocationCoords[i].longitude}) * 0.000621371;\n                    \n                 if(!isNaN(dist)){\n\n                    distance: dist.toFixed(3);\n                    if (distance < 25){\n\n                        const locationInfo = {\n                            location:{\n                                latitude:LocationCoords[i].latitude,\n                                longitude:LocationCoords[i].longitude\n                            },\n                            distance: dist.toFixed(3),\n                            title: LocationCoords[i].title,\n                            id: LocationCoords[i].id\n                        }\n                        nearestLocations.push(locationInfo);\n                    }\n                        \n                    }  \n\n                    console.log(nearestLocations);\n\n                    // nearestLocations.sort(function (a, b) {\n                    //     return a.distance - b.distance;\n                    //   }); \n                }\n                // setNearbyCachesArray(nearestLocations);\n               \n               }\n            }\n          );      \n    }\n\n    const mapMoved = (data) => {\n        console.log(data);\n        setCurrRegion(data);\n    }\n\n    return(\n        <SafeAreaView>\n            \n            <MapView\n            style={{width:Dimensions.get(\"window\").width, height:Dimensions.get(\"window\").height}}\n            ref={mapRef}\n            initialRegion={currRegion}\n            onRegionChangeComplete={mapMoved}\n     >\n         {\n             nearestLocations.map((location) => {\n\n                <Marker coordinate={{latitude: location.latitude, longitude: location.longitude}}\n                title={location.title}\n\n                />\n\n             })\n         }\n       \n\n     </MapView>\n     <Button title=\"Current\"></Button>\n        </SafeAreaView>\n    );\n}\n\nexport default MapScreen;"]},"metadata":{},"sourceType":"module"}